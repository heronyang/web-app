#!/usr/bin/env python

import sys
import os
import errno
import re
import pprint
import optparse
import shutil
import subprocess
import tempfile

# support python >= 2.4
try:
    from hashlib import sha1 as sha1_new
except ImportError:
    from sha import sha as sha1_new

try:
    from subprocess import check_call as subprocess_check_call
except ImportError:
    import subprocess

    class CalledProcessError(Exception):
        def __init__(self, cmd, returncode):
            (self.cmd, self.returncode) = (cmd, returncode)
        def __str__(self):
            return '%s returned %d' % (self.cmd, self.returncode)
        __repr__ = __str__

    def subprocess_check_call(*args, **kwargs):
        r = subprocess.call(*args, **kwargs)
        if r != 0:
            raise CalledProcessError(args, r)

DEBUG = 1
VERBOSE = 1

def subprocess_call(*args, **kwargs):
    if VERBOSE:
        sys.stderr.write('run: %r, %r\n' % (args[0], kwargs))
    subprocess_check_call(*args, **kwargs)

def program_name():
    return os.path.basename(sys.argv[0])

def make_dirs(p):
    try:
        os.makedirs(p)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

# NOTE: no separate 'prep' (extract and patch) step, import pristine source and patches into a git repo for patch management
# FIXME: git: verify fetched revision
# FIXME: git: verify working directory revision

def file_name_from_url(url):
    # http://sourceforge.net/projects/oprofile/files/oprofile/0.9.4/oprofile-0.9.4.tar.gz/download -> oprofile-0.9.4.tar.gz
    # http://pypi.python.org/packages/source/n/nose/nose-0.11.3.tar.gz#md5=fbf6bc7b7c2bbb535d8ea9a931a1e65b -> nose-0.11.3.tar.gz
    if url.startswith('http://sourceforge.net') and url.endswith('/download'):
        url = url[:-len('/download')]

    try:
        i = url.index('#')
    except ValueError:
        pass
    else:
        url = url[:i]
    return url[url.rfind('/')+1:]

def file_sha1sum_matches(filename, sha1_digest):
    try:
        f = open(filename)
    except IOError:
        return False
    sum = sha1_new()
    while 1:
        t = f.read(2**20)
        if not t:
            break
        sum.update(t)
    return sum.hexdigest() == sha1_digest

def fetch_url(pkg_info, dest_name, verbose=1):
    tarball_dir = os.environ.get('TARBALL_DIR', os.path.expanduser('~/packages/opensource'))
    (url, sha1sum) = pkg_info['url'], pkg_info['sha1sum']

    if 'tarball_name' in pkg_info:
        filename = pkg_info['tarball_name']
    else:
        filename = file_name_from_url(url)
    t = os.path.join(tarball_dir, filename)

    if 'extracted_name' in pkg_info:
        extracted_name = pkg_info['extracted_name']
    elif filename.endswith('.js'):
        extracted_name = filename
    else:
        m = re.match(r'(.*)\.tar\.[^.]*$', filename)
        if m:
            extracted_name = m.groups()[0]
        else:
            extracted_name = filename[:filename.rfind('.')]

    assert(extracted_name)
    if not dest_name:
        dest_name = extracted_name

    if os.path.isdir(dest_name):
        if verbose:
            sys.stderr.write('%s: "%s" exists, skipping\n' % (program_name(), dest_name))
        return

    if not file_sha1sum_matches(t, sha1sum):
        make_dirs(tarball_dir)
        subprocess_call(['wget', '-O', t, url])
        if not file_sha1sum_matches(t, sha1sum):
            sys.stderr.write('%s: checksum mismatch, remove corrupt file at "%s" or update the checksum to the correct one\n(Hint: grep for "%s" for the file to edit)\n' % (program_name(), t, sha1sum))
            sys.exit(3)

    if '.tar.' in filename:
        subprocess_call(['tar', '-xf', t])
    elif '.zip' in filename:
        subprocess_call(['unzip', '-o', t]) # -o: overwrite

    if extracted_name != dest_name:
        shutil.move(extracted_name, dest_name)

def fetch_rsync(pkg_info, dest_name, verbose=1):
    tarball_dir = os.environ.get('TARBALL_DIR', os.path.expanduser('~/packages/binary'))
    (url, sha1sum) = pkg_info['rsync'], pkg_info['sha1sum']

    if 'tarball_name' in pkg_info:
        filename = pkg_info['tarball_name']
    else:
        filename = file_name_from_url(url)
    t = os.path.join(tarball_dir, filename)
    if 'extracted_name' in pkg_info:
        extracted_name = pkg_info['extracted_name']
    else:
        m = re.match(r'(.*)\.tar\.[^.]*$', filename)
        if m:
            extracted_name = m.groups()[0]
        else:
            extracted_name = filename[:filename.rfind('.')]

    assert(extracted_name)
    if not dest_name:
        dest_name = extracted_name

    if os.path.isdir(dest_name):
        if verbose:
            sys.stderr.write('%s: "%s" exists, skipping\n' % (program_name(), dest_name))
        return

    if not file_sha1sum_matches(t, sha1sum):
        make_dirs(tarball_dir)
        subprocess_call(['rsync', '-hvv', '--progress', url, t])
        if not file_sha1sum_matches(t, sha1sum):
            sys.stderr.write('%s: "%s": checksum mismatch, remove this corrupt file\n' % (program_name(), filename))
            sys.exit(3)

    if '.tar.' in filename:
        subprocess_call(['tar', '-xf', t])
    else:
        subprocess_call(['unzip', '-o', t]) # -o: overwrite

    if extracted_name != dest_name:
        shutil.move(extracted_name, dest_name)

def git_revision_exists(repo_path, revision):
    if revision is None:
        return True
    assert(revision)
    dev_null = open('/dev/null', 'w')
    r = subprocess.call(['git', 'show', revision], stdout=dev_null, cwd=repo_path)
    return r == 0

def git_current_branch(dest_name):
    output = subprocess.Popen(['git', 'status', '-b', '--short'], stdout=subprocess.PIPE, stderr=None, cwd=dest_name, close_fds=True).communicate()[0]
    branch = output.split()[1]
    if branch is 'HEAD':
        return None
    else:
        return branch

def git_head_revision(dest_name):
    output = subprocess.Popen(['git', 'log', '-1', '--format=%H'], stdout=subprocess.PIPE, stderr=None, cwd=dest_name, close_fds=True).communicate()[0]
    return output.strip()

def fetch_git(pkg_info, dest_name):
    '@arg(revision) can be a branch or tag'
    # repo_dir: directory full of 'bare' git repositories fetched from upstream
    repo_dir = os.environ.get('REPO_DIR', os.path.expanduser('~/repos'))

    url = pkg_info['git']

    rev_or_branch = None
    if 'revision' in pkg_info:
        revision = pkg_info['revision']
        rev_or_branch = revision
    else:
        revision = None

    if 'branch' in pkg_info:
        branch = pkg_info['branch']
        if revision is not None:
            sys.stderr.write('Error: Can NOT set both branch & revision.\n');
            sys.exit(2)
        rev_or_branch = branch
    else:
        branch = None

    if url.endswith('/'):
        url = url[:-1]

    # repo_name: e.g. 'linux-omap-2.6.git'
    repo_name = url[url.rfind('/')+1:]
    # repo_dest_path serves as a download cache
    repo_dest_path = os.path.join(repo_dir, repo_name)

    # dest_name: 'linux-omap-2.6'
    if not dest_name:
        dest_name = repo_name
        if dest_name.endswith('.git'):
            dest_name = dest_name[:-len('.git')]
    assert(dest_name)

    # 'repo_dest_path' is a bare git repository in mirror mode (git clone --mirror) that
    #  serves as a download cache. Its refs/ contains all the same branches and tags as in 'url'.
    # 'dest_name' is the non-bare git repository used for compilation.
    # data flow: url -> repo_dest_path -> dest_name
    if os.path.exists(repo_dest_path):
        if not git_revision_exists(repo_dest_path, rev_or_branch):
            subprocess_call(['git', 'fetch', url, 'refs/*:refs/*'], cwd=repo_dest_path)
    else:
        subprocess_call(['git', 'clone', '--mirror', url, repo_dest_path]) # --mirror implies --bare

    if os.path.exists(dest_name):
        if not git_revision_exists(dest_name, rev_or_branch):
            subprocess_call(['git', 'fetch', 'download-cache'], cwd=dest_name)
            subprocess_call(['git', 'fetch', '--tags', 'download-cache'], cwd=dest_name)
            # copy remote tracking branch references from download-cache to origin
            dlcache_refs_dir = os.path.join(dest_name, '.git', 'refs', 'remotes', 'download-cache')
            origin_refs_dir = os.path.join(dest_name, '.git', 'refs', 'remotes', 'origin')
            for i in os.listdir(dlcache_refs_dir):
                shutil.copy2(os.path.join(dlcache_refs_dir, i), origin_refs_dir)

            if revision is not None:
                subprocess_call(['git', 'checkout', '--quiet', revision], cwd=dest_name)
            if branch is not None:
                subprocess_call(['git', 'checkout', '--track', 'origin/' + branch, '-B', branch],
                                cwd=dest_name)
    else:
        subprocess_call(['git', 'clone', repo_dest_path, dest_name])
        # setup two git remotes in 'dest_name':
        # 1. url as 'origin'
        # 2. repo_dest_path as 'download-cache'
        subprocess_call(['git', 'config', 'remote.origin.url', url], cwd=dest_name)
        subprocess_call(['git', 'remote', 'add', 'download-cache', repo_dest_path], cwd=dest_name)
        # Configure reviewboard.url
        reviewboard_url = pkg_info.get('reviewboard_url')
        if reviewboard_url is not None:
            subprocess_call(['git', 'config', 'reviewboard.url', reviewboard_url], cwd=dest_name)

        if revision is not None:
            subprocess_call(['git', 'checkout', '--quiet', revision], cwd=dest_name)
        if branch is not None:
            subprocess_call(['git', 'checkout', '--track', 'origin/' + branch, '-B', branch],
                            cwd=dest_name)


def hg_revision_exists(repo, revision):
    dev_null = open('/dev/null', 'w')
    r = subprocess.call(['hg', 'identify', '--rev', revision, repo], stdout=dev_null)
    return r == 0

def hg_working_dir_at_revision(repo, revision):
    tf = tempfile.TemporaryFile(mode='w+')
    subprocess_call(['hg', 'parent', '--template', '{node}\n{tags}\n', '--repository', repo], stdout=tf)
    tf.seek(0)
    wr = tf.readline().strip()
    if DEBUG > 1:
        print >> sys.stderr, 'working_dir_rev: ', wr
    if wr.startswith(revision):
        return True
    tags = set(tf.readline().split())
    if DEBUG > 1:
        print >> sys.stderr, 'tags: ', tags
    if revision in tags:
        return True
    return False

def fetch_hg(pkg_info, dest_name):
    '@arg(revision) can be a branch or tag'
    # repo_dir: directory full of 'bare' git repositories fetched from upstream
    repo_dir = os.environ.get('REPO_DIR', os.path.expanduser('~/repos'))

    (url, revision) = pkg_info['hg'], pkg_info['revision']

    if url.endswith('/'):
        url = url[:-1]

    # derive repo_name from url, ex: 'http://bitbucket.org/scottt/orbited' -> 'orbited'
    repo_name = url[url.rfind('/')+1:]
    # repo_dest_path servies as a download cache
    repo_dest_path = os.path.join(repo_dir, repo_name)

    # dest_name: ex: 'orbited'
    if not dest_name:
        dest_name = repo_name
        # I haven't seen a hg user use the 'X.hg' on 'bare' repositories like git does
        assert not dest_name.endswith('.hg')
    assert(dest_name)

    # barrowing git terminology, a 'bare' repository is one without a working directory, ex: 'hg clone --noupdate'
    # repo_dest_path is a bare repository that serves like a download cache
    # dest_name is the non-bare repository used for compilation
    # data flow: url -> repo_dest_path -> dest_name

    # repo_dest_path has no working directory
    if os.path.exists(repo_dest_path):
        if not hg_revision_exists(repo_dest_path, revision):
            # pull everything instead of 'hg pull --rev REVISION' to get tags
            subprocess_call(['hg', 'pull', '--repository', repo_dest_path, url,])
    else:
        # clone everything instead of 'hg clone --rev REVISION' to get tags
        subprocess_call(['hg', 'clone', '--noupdate', url, repo_dest_path,])

    # dest_name's working directory is updated to '@revision'
    if os.path.exists(dest_name):
        if hg_working_dir_at_revision(dest_name, revision):
            return
        # pull everything instead of 'hg pull --rev REVISION' to get tags
        subprocess_call(['hg', 'pull', '--repository', dest_name, repo_dest_path])
        # 'hg pull --update' only changes the working directory if new changes were transferred
        subprocess_call(['hg', 'update', '--rev', revision, '--repository', dest_name])
    else:
        # clone everything instead of 'hg clone --rev REVISION' to get tags
        subprocess_call(['hg', 'clone', '--updaterev', revision, repo_dest_path, dest_name])
        # hg clone --updaterev is buggy: http://mercurial.selenic.com/bts/issue2210
        subprocess_call(['hg', 'update', '--repository', dest_name, revision])
        # setup two hg paths in 'dest_name':
        # 1. rename 'repo_dest_path' from 'default' to 'download-cache'
        # 2. add 'url' as 'default'
        repo_config_filename = os.path.join(dest_name, '.hg', 'hgrc')
        hg_config_lines = open(repo_config_filename, 'U').readlines()
        i = hg_config_lines.index('[paths]\n')
        assert(i >= 0)
        default_lines = [ (j, x) for (j, x) in enumerate(hg_config_lines) if j > i and x.startswith('default =') ]
        assert(len(default_lines) == 1)
        j = default_lines[0][0]
        hg_config_lines[j] = ''.join(['default = ', url, '\n'])
        hg_config_lines.insert(j+1, ''.join(['download-cache = ', repo_dest_path, '\n']))
        f = open(repo_config_filename, 'w')
        f.writelines(hg_config_lines)
        f.close()
        tf = tempfile.TemporaryFile(mode='w+')
        subprocess_call(['hg', 'paths', '--repository', dest_name, 'download-cache'], stdout=tf)
        tf.seek(0)
        d = tf.read().strip()
        assert(d == repo_dest_path)
        tf = tempfile.TemporaryFile(mode='w+')
        subprocess_call(['hg', 'paths', '--repository', dest_name, 'default'], stdout=tf)
        tf.seek(0)
        assert(tf.read().strip() == url)
        # 3. config reviewboard.url
        reviewboard_url = pkg_info.get('reviewboard_url', '')
        if reviewboard_url:
            # FIXME:
            assert(0)
    assert(hg_working_dir_at_revision(dest_name, revision))

def fetch_svn(pkg_info, dest_name):
    # FIXME: doesn't support specifying anything other than url
    # doesn't support download caches either
    # dest_name is the non-bare repository used for compilation
    # data flow: url -> dest_name

    url = pkg_info['svn']
    assert(dest_name)

    if os.path.exists(dest_name):
        # FIXME: implement svn_working_dir_at_revision(dest_name, revision)
        return
    else:
        subprocess_call(['svn', 'checkout', url, dest_name])
    # assert(svn_working_dir_at_revision(dest_name, revision))

def fetch(pkg_info_dict, dest_name):
    if 'url' in pkg_info_dict:
        fetch_url(pkg_info_dict, dest_name)
    elif 'git' in pkg_info_dict:
        fetch_git(pkg_info_dict, dest_name)
    elif 'hg' in pkg_info_dict:
        fetch_hg(pkg_info_dict, dest_name)
    elif 'svn' in pkg_info_dict:
        fetch_svn(pkg_info_dict, dest_name)
    else:
        raise ValueError('don\'t know how to fetch package: \"%s\"' % pkg_info_dict)

def main(args):
    op = optparse.OptionParser(usage='usage: %prog [OPTIONS] LIST_OF_URL_CHECKSUM_IN_PYTHON_DICT_SYNTAX', option_list=[
            optparse.Option('--dest', dest='dest', default=None, help='destination directory'),
            optparse.Option('--just-print', action='store_true', dest='just_print',
                                            default=False, help='print URL, checksum and exit'),
    ])
    (options, args) = op.parse_args(args)
    if len(args) != 1:
        op.print_help()
        sys.exit(2)

    dicts = eval(args[0], {}, {})
    if DEBUG > 1:
        pprint.pprint(options)
        pprint.pprint(dicts)

    for i in dicts:
        if options.just_print:
            sys.stdout.write('%s\n' % (i,))
        else:
            if VERBOSE:
                for k in [ 'url', 'rsync', 'git', 'hg', 'svn' ]:
                    if k in i:
                        url = i
                        break
                else:
                    url = i
                sys.stderr.write('%s: %s\n' % (program_name(), url))
            fetch(i, options.dest)

def _test_git_setup():
    '-> (tmpdir_path, empty_git_repo_path)'
    tmpd = tempfile.mkdtemp()
    upstream = os.path.join(tmpd, 'fetch-test-git-upstream')
    make_dirs(upstream)
    subprocess_call(['git', 'init'], cwd=upstream)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)
    return (tmpd, upstream)

def test_git_by_rev():
    (tmpd, upstream) = _test_git_setup()
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    revision = git_head_revision(upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', revision='%(revision)s')]" % 
              dict(upstream=upstream, revision=revision)])
    except SystemExit, e:
        import traceback
        traceback.print_exc()
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), revision) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

def test_git_by_tag():
    (tmpd, upstream) = _test_git_setup()
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    tag = 'TAG-0'
    subprocess_call(['git', 'tag', tag], cwd=upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', revision='%(revision)s')]" % 
              dict(upstream=upstream, revision=tag)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), tag) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

def test_git_by_branch():
    (tmpd, upstream) = _test_git_setup()
    branch = 'BRANCH-0'
    subprocess_call(['git', 'checkout', '-b', branch], cwd=upstream)
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', branch='%(branch)s')]" % 
              dict(upstream=upstream, branch=branch)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), branch) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

def test_git_upstream_grows_new_rev():
    (tmpd, upstream) = _test_git_setup()
    branch = 'BRANCH-0'
    subprocess_call(['git', 'checkout', '-b', branch], cwd=upstream)
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', branch='%(branch)s')]" % 
              dict(upstream=upstream, branch=branch)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), branch) == True)
    subprocess_call(['touch', 'B'], cwd=upstream)
    subprocess_call(['git', 'add', 'B'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 1'], cwd=upstream)
    revision = git_head_revision(upstream)
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', revision='%(revision)s')]" % 
              dict(upstream=upstream, revision=revision)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), revision) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

def test_git_upstream_grows_new_tag():
    (tmpd, upstream) = _test_git_setup()
    branch = 'BRANCH-0'
    subprocess_call(['git', 'checkout', '-b', branch], cwd=upstream)
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', branch='%(branch)s')]" % 
              dict(upstream=upstream, branch=branch)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), branch) == True)
    subprocess_call(['touch', 'B'], cwd=upstream)
    subprocess_call(['git', 'add', 'B'], cwd=upstream)
    tag = 'TAG-1'
    subprocess_call(['git', 'commit', '-m', 'COMMIT 1'], cwd=upstream)
    subprocess_call(['git', 'tag', tag], cwd=upstream)
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', revision='%(revision)s')]" % 
              dict(upstream=upstream, revision=tag)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), tag) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

def test_git_upstream_grows_new_branch():
    (tmpd, upstream) = _test_git_setup()
    branch = 'BRANCH-0'
    subprocess_call(['git', 'checkout', '-b', branch], cwd=upstream)
    subprocess_call(['touch', 'A'], cwd=upstream)
    subprocess_call(['git', 'add', 'A'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 0'], cwd=upstream)
    old_cwd = os.getcwd()
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', branch='%(branch)s')]" % 
              dict(upstream=upstream, branch=branch)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), branch) == True)
    branch = 'BRANCH-1'
    subprocess_call(['git', 'checkout', '-b', branch], cwd=upstream)
    subprocess_call(['touch', 'B'], cwd=upstream)
    subprocess_call(['git', 'add', 'B'], cwd=upstream)
    subprocess_call(['git', 'commit', '-m', 'COMMIT 1'], cwd=upstream)
    os.chdir(tmpd)
    try:
        main(['--dest=r', "[dict(git='%(upstream)s', branch='%(branch)s')]" % 
              dict(upstream=upstream, branch=branch)])
    finally:
        os.chdir(old_cwd)
    assert(git_revision_exists(os.path.join(tmpd, 'r'), branch) == True)
    shutil.rmtree(tmpd, ignore_errors=True)
    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'repos', os.path.basename(upstream)), ignore_errors=True)

if __name__ == '__main__':
    main(sys.argv[1:])
